{"version":3,"sources":["webpack://bpdLogger/webpack/universalModuleDefinition","webpack://bpdLogger/webpack/bootstrap","webpack://bpdLogger/webpack/runtime/define property getters","webpack://bpdLogger/webpack/runtime/hasOwnProperty shorthand","webpack://bpdLogger/webpack/runtime/make namespace object","webpack://bpdLogger/./src/logger.ts","webpack://bpdLogger/./src/reporters/console.ts","webpack://bpdLogger/./src/index.ts"],"names":[],"mappings":"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","file":"logger.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bpdLogger\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bpdLogger\"] = factory();\n\telse\n\t\troot[\"bpdLogger\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export type LogProperty = string | (() => string) | undefined;\r\nexport type MeasureCallbackType<T> = (() => T) | Promise<T>;\r\n\r\nexport interface Log {\r\n\tprops: Map<string, LogProperty>;\r\n\ttimestamp: Date;\r\n\tlevel: LogLevel;\r\n\terror?: Error | string;\r\n}\r\n\r\nexport const PROPERTIES = {\r\n\tMESSAGE: \"message\",\r\n\tID: \"id\",\r\n\tMODULE: \"module\",\r\n\tMETHOD: \"method\",\r\n\tPERFORFMANCE: \"performance\",\r\n};\r\n\r\nexport interface LoggerMeasureOptions {\r\n\tlabel?: string;\r\n\tfraction?: number;\r\n\trethrow?: boolean;\r\n}\r\n\r\nexport interface LoggerReporter {\r\n\t(logObj: Log): Promise<boolean>;\r\n}\r\n\r\nexport interface LoggerExtension {\r\n\t(): [string, LogProperty];\r\n}\r\n\r\nexport type LogLevel =\r\n\t| \"debug\"\r\n\t| \"info\"\r\n\t| \"warn\"\r\n\t| \"error\"\r\n\t| \"exception\"\r\n\t| \"none\";\r\n\r\nexport interface LoggerSetup {\r\n\treporters?: LoggerReporter[];\r\n\textensions?: LoggerExtension[];\r\n}\r\n\r\nexport interface ISetupBuilder {\r\n\t/**\r\n\t * Sets logging level in setup\r\n\t * @param {LogLevel} level\r\n\t * @returns new bulder instance with changed logging level\r\n\t */\r\n\twithLevel(level: LogLevel): ISetupBuilder;\r\n\t/**\r\n\t * Sets reporters on in setup\r\n\t * NOTE: Reporters are added to existing\r\n\t * @param {LoggerReporter[]} reporters list of reporters\r\n\t * @returns new instance of bulder\r\n\t */\r\n\twithReporters(...reporters: LoggerReporter[]): ISetupBuilder;\r\n\t/**\r\n\t * Adds extensions to setup\r\n\t * @param {LoggerExtension} extensions list of extensions\r\n\t * @returns new instance of bulder\r\n\t */\r\n\twithExtensions(...extensions: LoggerExtension[]): ISetupBuilder;\r\n\t/**\r\n\t * Clears list of reporters in setup\r\n\t * @returns new instance of bulder\r\n\t */\r\n\tclearReporters(): ISetupBuilder;\r\n\t/**\r\n\t * Clears list of extensions\r\n\t * @returns new instance of bulder\r\n\t */\r\n\tclearExtensions(): ISetupBuilder;\r\n\t/**\r\n\t * Spawns new instance of logger with updated setup\r\n\t * @returns\r\n\t */\r\n\tsave(): Logger;\r\n}\r\n\r\nexport interface Logger {\r\n\t/**\r\n\t * Sets an id property\r\n\t * @param {string} id - any identifier string\r\n\t * @returns new instance with id property\r\n\t */\r\n\tid: (id: string) => Logger;\r\n\t/**\r\n\t * Sets an module property\r\n\t * @param {string} module - any module string\r\n\t * @returns new instance with module property\r\n\t */\r\n\tmodule: (moduleName: string) => Logger;\r\n\t/**\r\n\t * Sets an method name property\r\n\t * @param {string} method - any method string\r\n\t * @returns new instance with method property\r\n\t */\r\n\tmethod: (fName: string) => Logger;\r\n\t/**\r\n\t * Sets any property\r\n\t * @param {string} prop property name\r\n\t * @param {LogProperty} value property value\r\n\t * @returns new logger instance\r\n\t */\r\n\tprop: (prop: string, value: LogProperty) => Logger;\r\n\t/**\r\n\t * Creates a configuration builder\r\n\t * @param {LoggerSetup} newSetup (optional)\r\n\t * @returns setup builder instance\r\n\t */\r\n\tconfigure: (setup?: LoggerSetup) => ISetupBuilder;\r\n\t/**\r\n\t * Logs message on debug level\r\n\t * @param {string} message\r\n\t * @returns new Logger instance\r\n\t */\r\n\tdebug: (message?: LogProperty) => Promise<boolean>;\r\n\t/**\r\n\t * Logs message on info level\r\n\t * @param {string} message\r\n\t * @returns new Logger instance\r\n\t */\r\n\tinfo: (message?: LogProperty) => Promise<boolean>;\r\n\r\n\t/**\r\n\t * Logs message on warn level\r\n\t * @param {string} message\r\n\t * @returns new Logger instance\r\n\t */\r\n\twarn: (message?: LogProperty) => Promise<boolean>;\r\n\t/**\r\n\t * Logs message on error level\r\n\t * @param {string} message\r\n\t * @returns new Logger instance\r\n\t */\r\n\terror: (message?: LogProperty) => Promise<boolean>;\r\n\t/**\r\n\t * Logs message on exception level\r\n\t * @param {string} message\r\n\t * @returns new Logger instance\r\n\t */\r\n\texception: (error: Error | string) => Promise<boolean>;\r\n\t/**\r\n\t * Logs message on specific level\r\n\t * @param {LogLevel} logLevel level that messsage shall be logged on\r\n\t * @param {string} message\r\n\t * @param {Error} error (optional) in case of an exception\r\n\t * @returns\r\n\t */\r\n\tmeasure: <T>(\r\n\t\tcallback: MeasureCallbackType<T>,\r\n\t\toptions?: LoggerMeasureOptions\r\n\t) => Promise<T | null>;\r\n\t/**\r\n\t * Logs message on specific level\r\n\t * @param {LogLevel} logLevel level that messsage shall be logged on\r\n\t * @param {string} message\r\n\t * @param {Error} error (optional) in case of an exception\r\n\t * @returns\r\n\t */\r\n\tlog: (\r\n\t\tlevel: LogLevel,\r\n\t\tmessage?: LogProperty,\r\n\t\terror?: Error | string\r\n\t) => Promise<boolean>;\r\n}\r\n\r\n/**\r\n * Checks whether coming message log level matches level set in library\r\n * @param {LogLevel} level - current log level\r\n * @param {LogLevel} systemLevel - log level set in library\r\n * @returns whether current log level matches system level\r\n */\r\nexport function matchesLevel(level: LogLevel, systemLevel: LogLevel): boolean {\r\n\tif (level === systemLevel) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (systemLevel === \"debug\") {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (systemLevel === \"none\") {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst levelIdx = levels.findIndex((l) => l === level);\r\n\tconst sysIdx = levels.findIndex((l) => l === systemLevel);\r\n\treturn levelIdx <= sysIdx;\r\n}\r\n\r\n/**\r\n * Extends property map with props returned by extension\r\n * @param {Map<string, LogProperty>} map - property map\r\n * @param {LoggerExtension[]} extensions - logger extensions\r\n * @returns extended map\r\n */\r\nfunction extendMap(\r\n\tmap: Map<string, LogProperty>,\r\n\textensions?: LoggerExtension[]\r\n) {\r\n\tif (!extensions) {\r\n\t\treturn map;\r\n\t}\r\n\textensions.forEach((e) => map.set(...e()));\r\n\treturn map;\r\n}\r\n\r\n/**\r\n * Pushes log object to reporters\r\n * @param {LogLevel} level - log message level\r\n * @param {Map<string, LogProperty>} props - log properties\r\n * @param {LoggerReporter[]} reporters - logger reporters\r\n * @param {Error} error - (optional) - exception object\r\n * @returns whether push succeeded or not\r\n */\r\nasync function pushLog(\r\n\tlevel: LogLevel,\r\n\tprops: Map<string, LogProperty>,\r\n\treporters?: LoggerReporter[],\r\n\terror?: Error | string\r\n): Promise<boolean> {\r\n\tif (!reporters) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst timestamp = new Date();\r\n\t\tawait Promise.all(\r\n\t\t\treporters.map((p) =>\r\n\t\t\t\tp({\r\n\t\t\t\t\tprops,\r\n\t\t\t\t\ttimestamp,\r\n\t\t\t\t\tlevel,\r\n\t\t\t\t\terror,\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t);\r\n\t} catch (e) {\r\n\t\tconsole.error(e);\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Merges two array into one\r\n * @param {T[]} arr1 - first array\r\n * @param {T[]} arr2 - second array\r\n * @returns new array\r\n */\r\nfunction mergeArrays<T>(arr1: T[], arr2: T[]): T[] {\r\n\treturn [...arr1, ...arr2];\r\n}\r\n\r\n/**\r\n *\r\n * @param array - {optional}\r\n * @returns array or empty array when it doesnt exist\r\n */\r\nfunction getArray<T>(array?: T[]): T[] {\r\n\treturn array ? array : [];\r\n}\r\n\r\nasync function executeCallback<T>(callback: () => T): Promise<[number, T]> {\r\n\tconst start = performance.now();\r\n\tconst result = callback();\r\n\treturn [performance.now() - start, result];\r\n}\r\n\r\nasync function executePromise<T>(callback: Promise<T>): Promise<[number, T]> {\r\n\tconst start = performance.now();\r\n\tconst result = await callback;\r\n\treturn [performance.now() - start, result];\r\n}\r\n\r\nasync function executeMeasure<T>(\r\n\tcallback: MeasureCallbackType<T>\r\n): Promise<[number, T]> {\r\n\tif (typeof callback === \"function\") {\r\n\t\treturn executeCallback(callback);\r\n\t}\r\n\tif (callback instanceof Promise) {\r\n\t\treturn executePromise(callback);\r\n\t}\r\n\r\n\treturn [0, callback];\r\n}\r\n\r\n/**\r\n * Creates copy of setup object with new property set\r\n * @param {LoggerSetup} setup - setup object\r\n * @param {string} id - setup property key\r\n * @param {any} value - value to be set on the object\r\n * @returns new setup object\r\n */\r\nfunction setOnSetup(\r\n\tsetup: LoggerSetup,\r\n\tid: keyof LoggerSetup,\r\n\tvalue: any\r\n): LoggerSetup {\r\n\treturn {\r\n\t\t...setup,\r\n\t\t[id]: value,\r\n\t};\r\n}\r\n\r\n/**\r\n * Parses log property into string\r\n * @param {LogProperty} prop - log property\r\n * @returns\r\n */\r\nexport function parseLogProperty(prop: LogProperty): string | undefined {\r\n\tif (typeof prop === \"function\") {\r\n\t\treturn prop();\r\n\t}\r\n\treturn prop;\r\n}\r\n\r\n/**\r\n * Creates a logger setup builder\r\n * @param {LoggerSetup} initSetup - initial logger setup\r\n * @param {Map<string, LogProperty>} props - logger properties\r\n * @param {LogLevel} level - logging level\r\n * @returns new builder instance\r\n */\r\nexport function getSetupBuilder(\r\n\tinitSetup: LoggerSetup,\r\n\tprops: Map<string, LogProperty>,\r\n\tlevel: LogLevel\r\n): ISetupBuilder {\r\n\tconst builder: ISetupBuilder = {\r\n\t\twithLevel: (level: LogLevel) => {\r\n\t\t\treturn getSetupBuilder({ ...initSetup }, props, level);\r\n\t\t},\r\n\t\twithReporters: (...reporters: LoggerReporter[]) => {\r\n\t\t\tconst array = mergeArrays<LoggerReporter>(\r\n\t\t\t\tgetArray(initSetup.reporters),\r\n\t\t\t\treporters\r\n\t\t\t);\r\n\t\t\treturn getSetupBuilder(\r\n\t\t\t\tsetOnSetup(initSetup, \"reporters\", array),\r\n\t\t\t\tprops,\r\n\t\t\t\tlevel\r\n\t\t\t);\r\n\t\t},\r\n\t\twithExtensions: (...extensions: LoggerExtension[]) => {\r\n\t\t\tconst array = mergeArrays(\r\n\t\t\t\tgetArray(initSetup.extensions),\r\n\t\t\t\textensions\r\n\t\t\t);\r\n\t\t\treturn getSetupBuilder(\r\n\t\t\t\tsetOnSetup(initSetup, \"extensions\", array),\r\n\t\t\t\tprops,\r\n\t\t\t\tlevel\r\n\t\t\t);\r\n\t\t},\r\n\t\tclearReporters: () => {\r\n\t\t\treturn getSetupBuilder(\r\n\t\t\t\tsetOnSetup(initSetup, \"reporters\", []),\r\n\t\t\t\tprops,\r\n\t\t\t\tlevel\r\n\t\t\t);\r\n\t\t},\r\n\t\tclearExtensions: () => {\r\n\t\t\treturn getSetupBuilder(\r\n\t\t\t\tsetOnSetup(initSetup, \"extensions\", []),\r\n\t\t\t\tprops,\r\n\t\t\t\tlevel\r\n\t\t\t);\r\n\t\t},\r\n\t\tsave: () => {\r\n\t\t\treturn getLogger(initSetup, props, level);\r\n\t\t},\r\n\t};\r\n\treturn builder;\r\n}\r\n\r\n/**\r\n * Creates new logger instance\r\n * @param {LoggerSetup} setup\r\n * @param {Map<string, LogProperty>} init\r\n * @param {LogLevel} level\r\n * @returns New instance of logger\r\n */\r\nexport function getLogger(\r\n\tsetup: LoggerSetup,\r\n\tinit: Map<string, LogProperty>,\r\n\tlevel: LogLevel\r\n): Logger {\r\n\tfunction updateMap(prop: string, value: LogProperty) {\r\n\t\tconst map = new Map(init);\r\n\t\tmap.set(prop, value);\r\n\t\treturn map;\r\n\t}\r\n\r\n\tconst instance: Logger = {\r\n\t\tid: (id: string) => {\r\n\t\t\treturn instance.prop(PROPERTIES.ID, id);\r\n\t\t},\r\n\t\tmodule: (moduleName: string) => {\r\n\t\t\treturn instance.prop(PROPERTIES.MODULE, moduleName);\r\n\t\t},\r\n\t\tmethod: (method: string) => {\r\n\t\t\treturn instance.prop(PROPERTIES.METHOD, method);\r\n\t\t},\r\n\t\tprop: (prop: string, value: LogProperty) => {\r\n\t\t\treturn getLogger({ ...setup }, updateMap(prop, value), level);\r\n\t\t},\r\n\t\tconfigure: (newSetup?: LoggerSetup) => {\r\n\t\t\tconst copy = { ...setup, ...newSetup };\r\n\t\t\treturn getSetupBuilder(copy, new Map(init), level);\r\n\t\t},\r\n\t\tdebug: async (message?: LogProperty) => {\r\n\t\t\treturn instance.log(\"debug\", message);\r\n\t\t},\r\n\t\twarn: async (message?: LogProperty) => {\r\n\t\t\treturn instance.log(\"warn\", message);\r\n\t\t},\r\n\t\tinfo: async (message?: LogProperty) => {\r\n\t\t\treturn instance.log(\"info\", message);\r\n\t\t},\r\n\t\terror: async (message?: LogProperty) => {\r\n\t\t\treturn instance.log(\"error\", message);\r\n\t\t},\r\n\t\texception: async (error: Error | string) => {\r\n\t\t\treturn instance.log(\r\n\t\t\t\t\"exception\",\r\n\t\t\t\t() => {\r\n\t\t\t\t\treturn typeof error === \"string\"\r\n\t\t\t\t\t\t? error\r\n\t\t\t\t\t\t: `[${error.name}] ${error.message}`;\r\n\t\t\t\t},\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t},\r\n\t\tmeasure: async <T>(\r\n\t\t\tcallback: MeasureCallbackType<T>,\r\n\t\t\toptions?: LoggerMeasureOptions\r\n\t\t) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst [time, result] = await executeMeasure(callback);\r\n\t\t\t\tconst fixedTime = time.toFixed(options?.fraction ?? 4);\r\n\t\t\t\tinit.set(PROPERTIES.PERFORFMANCE, fixedTime);\r\n\t\t\t\tconst logResult = await instance.log(\r\n\t\t\t\t\t\"debug\",\r\n\t\t\t\t\t`${options?.label ?? \"Performance\"}: ${fixedTime}`\r\n\t\t\t\t);\r\n\t\t\t\tif (logResult) return result;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tawait instance.exception(e);\r\n\t\t\t\tif (options?.rethrow === true) throw e;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\tlog: async (\r\n\t\t\tlogLevel: LogLevel,\r\n\t\t\tmessage?: LogProperty,\r\n\t\t\terror?: Error | string\r\n\t\t) => {\r\n\t\t\tif (!levels.includes(logLevel) || !matchesLevel(logLevel, level)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tconst map = new Map(init);\r\n\t\t\tif (message) map.set(PROPERTIES.MESSAGE, message);\r\n\t\t\textendMap(map, setup.extensions);\r\n\t\t\treturn pushLog(logLevel, map, setup.reporters, error);\r\n\t\t},\r\n\t};\r\n\treturn instance;\r\n}\r\n\r\nconst levels: LogLevel[] = [\r\n\t\"none\",\r\n\t\"exception\",\r\n\t\"error\",\r\n\t\"warn\",\r\n\t\"info\",\r\n\t\"debug\",\r\n];\r\n\r\nconst globalSetup: LoggerSetup = {\r\n\treporters: [],\r\n\textensions: [],\r\n};\r\n\r\nconst logger = getLogger(globalSetup, new Map(), \"none\");\r\nexport default logger;\r\n","import { Log, LoggerReporter, parseLogProperty } from \"../logger\";\r\n\r\nexport interface ConsoleLoggerInit {\r\n\tprops: string[];\r\n\tseparator?: [string, string];\r\n\tplaceholder?: string;\r\n\tprintStack?: boolean;\r\n}\r\n\r\ninterface ConsoleLoggerConfig {\r\n\tprops: string[];\r\n\tseparator: [string, string];\r\n\tplaceholder: string;\r\n\tprintStack?: boolean;\r\n}\r\n\r\n/**\r\n * Extracts values from log object\r\n * @param {Log} data - log object\r\n * @param {string[]} props - list of properties to be extracted from Log object\r\n * @param {string} placeholder - value to be set when prop was not found\r\n * @returns List of properties extracted from log object\r\n */\r\nfunction extractValuesFromLog(\r\n\tdata: Log,\r\n\tprops: string[],\r\n\tplaceholder: string\r\n): string[] {\r\n\treturn props.map((p) => {\r\n\t\tlet val = placeholder;\r\n\t\tswitch (p) {\r\n\t\t\tcase \"date\":\r\n\t\t\t\tval = data.timestamp.toLocaleString();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"level\":\r\n\t\t\t\tval = data.level;\r\n\t\t\tdefault:\r\n\t\t\t\tif (data.props.has(p)) {\r\n\t\t\t\t\tval = parseLogProperty(data.props.get(p)) ?? placeholder;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn val;\r\n\t});\r\n}\r\n\r\n/**\r\n * Merges log properties into one string\r\n * @param {string[]} props - data props\r\n * @param {string} leftSeparator - left side character\r\n * @param {string} rightSeprator - right side character\r\n * @returns props merged into string\r\n */\r\nfunction mergeProps(\r\n\tprops: string[],\r\n\tleftSeparator: string,\r\n\trightSeprator: string\r\n): string {\r\n\treturn `${leftSeparator}${props.join(\r\n\t\trightSeprator + leftSeparator\r\n\t)}${rightSeprator}`;\r\n}\r\n\r\n/**\r\n * Creates log message text\r\n * @param {Log} log - logger object\r\n * @param {ConsoleLoggerConfig} setup - reporter setup\r\n * @returns Log message\r\n */\r\nfunction buildMessage(log: Log, setup: ConsoleLoggerConfig): string {\r\n\tconst values = extractValuesFromLog(log, setup.props, setup.placeholder);\r\n\treturn mergeProps(values, setup.separator[0], setup.separator[1]);\r\n}\r\n\r\n/**\r\n * Implementaion of console log reporter\r\n * @param {ConsoleLoggerInit} init - initial setup object\r\n * @returns reporter callback\r\n */\r\nexport default function ConsoleLoggerReporter(\r\n\tinit: ConsoleLoggerInit\r\n): LoggerReporter {\r\n\tconst _setup: ConsoleLoggerConfig = {\r\n\t\t...init,\r\n\t\tseparator: init.separator ?? [\"[\", \"]\"],\r\n\t\tplaceholder: init.placeholder ?? \"-\",\r\n\t};\r\n\r\n\treturn async (log: Log) => {\r\n\t\tconst message = buildMessage(log, _setup);\r\n\t\tswitch (log.level) {\r\n\t\t\tcase \"error\":\r\n\t\t\t\tconsole.error(message);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"warn\":\r\n\t\t\t\tconsole.warn(message);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.log(message);\r\n\t\t}\r\n\t\tif (log.error && _setup.printStack === true) {\r\n\t\t\tconsole.error(log.error);\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n}\r\n","export * from \"./logger\";\r\nexport * from \"./reporters/console\";\r\n"],"sourceRoot":""}